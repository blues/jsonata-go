[{
    "testDesc": "Valid TS, non UTC, includes timezone offset, T as time seperator, seconds granularity",
    "input_srcTs": "2023-08-01T09:45:43+01:00",
    "input_srcFormat": "2006-01-02T15:04:05-07:00",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20230801",
      "DateKey": "20230801",
      "UTC": "2023-08-01T08:45:43.000Z",
      "DateUTC": "2023-08-01",
      "Local": "2023-08-01T09:45:43.000+01:00",
      "DateLocal": "2023-08-01",
      "HourId": "Hours_2023080108",
      "HourKey": "2023080108",
      "Millis": "1690879543000",
      "Hour": "8",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+01:00",
      "YearMonth": "202308",
      "YearWeek": "202331",
      "YearIsoWeek": "202331",
      "YearDay": "2023213"
    }
  }, {
    "testDesc": "Valid TS, non UTC, DOES NOT include timezone offset, NO \u0027T\u0027 as time seperator, seconds granularity.  implied timezone not explicit - that is, this is a +1:00 BST time, but doesnt have the offset in it.  This is where the TimeZone is key to support conversion.",
    "input_srcTs": "2023-08-01 09:45:43",
    "input_srcFormat": "2006-01-02 15:04:05",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20230801",
      "DateKey": "20230801",
      "UTC": "2023-08-01T08:45:43.000Z",
      "DateUTC": "2023-08-01",
      "Local": "2023-08-01T09:45:43.000+01:00",
      "DateLocal": "2023-08-01",
      "HourId": "Hours_2023080108",
      "HourKey": "2023080108",
      "Millis": "1690879543000",
      "Hour": "8",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+01:00",
      "YearMonth": "202308",
      "YearWeek": "202331",
      "YearIsoWeek": "202331",
      "YearDay": "2023213"
    }
  }, {
    "testDesc": "Valid TS, non UTC, includes timezone offset, T as time seperator, millis seconds granularity this time",
    "input_srcTs": "2023-08-01 09:45:43.666+01:00",
    "input_srcFormat": "2006-01-02 15:04:05.999-07:00",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20230801",
      "DateKey": "20230801",
      "UTC": "2023-08-01T08:45:43.666Z",
      "DateUTC": "2023-08-01",
      "Local": "2023-08-01T09:45:43.666+01:00",
      "DateLocal": "2023-08-01",
      "HourId": "Hours_2023080108",
      "HourKey": "2023080108",
      "Millis": "1690879543666",
      "Hour": "8",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+01:00",
      "YearMonth": "202308",
      "YearWeek": "202331",
      "YearIsoWeek": "202331",
      "YearDay": "2023213"
    }
  }, {
    "testDesc": "Valid TS, non UTC, includes timezone offset, T as time seperator, seconds granularity, crosses days when in UTC",
    "input_srcTs": "2023-08-02T00:45:43+01:00",
    "input_srcFormat": "2006-01-02T15:04:05-07:00",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20230801",
      "DateKey": "20230801",
      "UTC": "2023-08-01T23:45:43.000Z",
      "DateUTC": "2023-08-01",
      "Local": "2023-08-02T00:45:43.000+01:00",
      "DateLocal": "2023-08-02",
      "HourId": "Hours_2023080123",
      "HourKey": "2023080123",
      "Millis": "1690933543000",
      "Hour": "23",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+01:00",
      "YearMonth": "202308",
      "YearWeek": "202331",
      "YearIsoWeek": "202331",
      "YearDay": "2023213"
    }
  }, {
    "testDesc": "Historic standard for internal SDV timestimes it generates is UTC, rfc3339Nano.  This needs to go from UTC to local, so the timezone offset needs to be derived (not in source)",
    "input_srcTs": "2020-08-01T23:45:43.66674002Z",
    "input_srcFormat": "2006-01-02T15:04:05.99999999Z07:00",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20200801",
      "DateKey": "20200801",
      "UTC": "2020-08-01T22:45:43.666Z",
      "DateUTC": "2020-08-01",
      "Local": "2020-08-01T23:45:43.666+01:00",
      "DateLocal": "2020-08-01",
      "HourId": "Hours_2020080122",
      "HourKey": "2020080122",
      "Millis": "1596321943666",
      "Hour": "22",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+01:00",
      "YearMonth": "202008",
      "YearWeek": "202030",
      "YearIsoWeek": "202031",
      "YearDay": "2020214"
    }
  }, {
    "testDesc": "Historic standard for internal SDV timestimes it generates is UTC, rfc3339Nano.  This needs to go from UTC to local, so the timezone offset needs to be derived (not in source) , JAN01 version",
    "input_srcTs": "2020-01-01T23:45:43.66674002Z",
    "input_srcFormat": "2006-01-02T15:04:05.99999999Z07:00",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20200101",
      "DateKey": "20200101",
      "UTC": "2020-01-01T23:45:43.666Z",
      "DateUTC": "2020-01-01",
      "Local": "2020-01-01T23:45:43.666+00:00",
      "DateLocal": "2020-01-01",
      "HourId": "Hours_2020010123",
      "HourKey": "2020010123",
      "Millis": "1577922343666",
      "Hour": "23",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+00:00",
      "YearMonth": "202001",
      "YearWeek": "202000",
      "YearIsoWeek": "202001",
      "YearDay": "2020001"
    }
  }, {
    "testDesc": "test a date input",
    "input_srcTs": "2020-01-01",
    "input_srcFormat": "2006-01-02",
    "input_srcTz": "UTC",
    "DateDim": {
      "DateId": "Dates_20200101",
      "DateKey": "20200101",
      "UTC": "2020-01-01T00:00:00.000Z",
      "DateUTC": "2020-01-01",
      "Local": "2020-01-01T00:00:00.000+00:00",
      "DateLocal": "2020-01-01",
      "HourId": "Hours_2020010100",
      "HourKey": "2020010100",
      "Millis": "1577836800000",
      "Hour": "0",
      "TimeZone": "UTC",
      "TimeZoneOffset": "+00:00",
      "YearMonth": "202001",
      "YearWeek": "202000",
      "YearIsoWeek": "202001",
      "YearDay": "2020001"
    }
  }]